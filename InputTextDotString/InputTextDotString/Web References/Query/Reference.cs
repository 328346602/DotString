//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18449
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18449 版自动生成。
// 
#pragma warning disable 1591

namespace InputTextDotString.Query {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="QuerySoap", Namespace="http://www.mapgis.com.cn/")]
    public partial class Query : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DCLocaltionQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCRedLineQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCHotPointQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCGetImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCQueryKeyValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCQueryTFOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCQueryAttOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCQueryAttValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCDeleteImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SGFullTextSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveQuerySolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteQuerySolutionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRuleBySubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetYearBySubjectAndRegionCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttByInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFeatureGeometryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCIndexAttOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatisticsInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubjcectFromDataDicTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataConnecBySubjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBufferQueryParamOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryCadaApprove4YZOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCQueryAttValueAndBoundOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCTestQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DCQueryAliasOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Query() {
            this.Url = global::InputTextDotString.Properties.Settings.Default.InputTextDotString_Query_Query;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DCLocaltionQueryCompletedEventHandler DCLocaltionQueryCompleted;
        
        /// <remarks/>
        public event DCRedLineQueryCompletedEventHandler DCRedLineQueryCompleted;
        
        /// <remarks/>
        public event DCHotPointQueryCompletedEventHandler DCHotPointQueryCompleted;
        
        /// <remarks/>
        public event DCGetImageCompletedEventHandler DCGetImageCompleted;
        
        /// <remarks/>
        public event DCQueryKeyValueCompletedEventHandler DCQueryKeyValueCompleted;
        
        /// <remarks/>
        public event DCQueryTFCompletedEventHandler DCQueryTFCompleted;
        
        /// <remarks/>
        public event DCQueryCompletedEventHandler DCQueryCompleted;
        
        /// <remarks/>
        public event GetQueryResultCompletedEventHandler GetQueryResultCompleted;
        
        /// <remarks/>
        public event DCQueryAttCompletedEventHandler DCQueryAttCompleted;
        
        /// <remarks/>
        public event DCQueryAttValueCompletedEventHandler DCQueryAttValueCompleted;
        
        /// <remarks/>
        public event DCDeleteImageCompletedEventHandler DCDeleteImageCompleted;
        
        /// <remarks/>
        public event SGFullTextSearchCompletedEventHandler SGFullTextSearchCompleted;
        
        /// <remarks/>
        public event SaveQuerySolutionCompletedEventHandler SaveQuerySolutionCompleted;
        
        /// <remarks/>
        public event DeleteQuerySolutionCompletedEventHandler DeleteQuerySolutionCompleted;
        
        /// <remarks/>
        public event GetRuleBySubjectCompletedEventHandler GetRuleBySubjectCompleted;
        
        /// <remarks/>
        public event GetYearBySubjectAndRegionCodeCompletedEventHandler GetYearBySubjectAndRegionCodeCompleted;
        
        /// <remarks/>
        public event GetAttByInfoCompletedEventHandler GetAttByInfoCompleted;
        
        /// <remarks/>
        public event GetFeatureGeometryCompletedEventHandler GetFeatureGeometryCompleted;
        
        /// <remarks/>
        public event DCIndexAttCompletedEventHandler DCIndexAttCompleted;
        
        /// <remarks/>
        public event GetAttValueCompletedEventHandler GetAttValueCompleted;
        
        /// <remarks/>
        public event GetStatisticsInfoCompletedEventHandler GetStatisticsInfoCompleted;
        
        /// <remarks/>
        public event GetSubjcectFromDataDicTableCompletedEventHandler GetSubjcectFromDataDicTableCompleted;
        
        /// <remarks/>
        public event GetDataConnecBySubjectCompletedEventHandler GetDataConnecBySubjectCompleted;
        
        /// <remarks/>
        public event SetBufferQueryParamCompletedEventHandler SetBufferQueryParamCompleted;
        
        /// <remarks/>
        public event QueryCadaApprove4YZCompletedEventHandler QueryCadaApprove4YZCompleted;
        
        /// <remarks/>
        public event DCQueryAttValueAndBoundCompletedEventHandler DCQueryAttValueAndBoundCompleted;
        
        /// <remarks/>
        public event DCTestQueryCompletedEventHandler DCTestQueryCompleted;
        
        /// <remarks/>
        public event DCQueryAliasCompletedEventHandler DCQueryAliasCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCLocaltionQuery", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCLocaltionQuery(string strSearchValue, int nPageIndexForShow, int nPageSize, string bIsBlur) {
            object[] results = this.Invoke("DCLocaltionQuery", new object[] {
                        strSearchValue,
                        nPageIndexForShow,
                        nPageSize,
                        bIsBlur});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCLocaltionQueryAsync(string strSearchValue, int nPageIndexForShow, int nPageSize, string bIsBlur) {
            this.DCLocaltionQueryAsync(strSearchValue, nPageIndexForShow, nPageSize, bIsBlur, null);
        }
        
        /// <remarks/>
        public void DCLocaltionQueryAsync(string strSearchValue, int nPageIndexForShow, int nPageSize, string bIsBlur, object userState) {
            if ((this.DCLocaltionQueryOperationCompleted == null)) {
                this.DCLocaltionQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCLocaltionQueryOperationCompleted);
            }
            this.InvokeAsync("DCLocaltionQuery", new object[] {
                        strSearchValue,
                        nPageIndexForShow,
                        nPageSize,
                        bIsBlur}, this.DCLocaltionQueryOperationCompleted, userState);
        }
        
        private void OnDCLocaltionQueryOperationCompleted(object arg) {
            if ((this.DCLocaltionQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCLocaltionQueryCompleted(this, new DCLocaltionQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCRedLineQuery", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCRedLineQuery(string strWhere, int nPageIndexForShow, int nPageSize) {
            object[] results = this.Invoke("DCRedLineQuery", new object[] {
                        strWhere,
                        nPageIndexForShow,
                        nPageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCRedLineQueryAsync(string strWhere, int nPageIndexForShow, int nPageSize) {
            this.DCRedLineQueryAsync(strWhere, nPageIndexForShow, nPageSize, null);
        }
        
        /// <remarks/>
        public void DCRedLineQueryAsync(string strWhere, int nPageIndexForShow, int nPageSize, object userState) {
            if ((this.DCRedLineQueryOperationCompleted == null)) {
                this.DCRedLineQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCRedLineQueryOperationCompleted);
            }
            this.InvokeAsync("DCRedLineQuery", new object[] {
                        strWhere,
                        nPageIndexForShow,
                        nPageSize}, this.DCRedLineQueryOperationCompleted, userState);
        }
        
        private void OnDCRedLineQueryOperationCompleted(object arg) {
            if ((this.DCRedLineQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCRedLineQueryCompleted(this, new DCRedLineQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCHotPointQuery", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCHotPointQuery(string solutionName, string inputAtt, string spliter1, string spliter2, string dots) {
            object[] results = this.Invoke("DCHotPointQuery", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2,
                        dots});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCHotPointQueryAsync(string solutionName, string inputAtt, string spliter1, string spliter2, string dots) {
            this.DCHotPointQueryAsync(solutionName, inputAtt, spliter1, spliter2, dots, null);
        }
        
        /// <remarks/>
        public void DCHotPointQueryAsync(string solutionName, string inputAtt, string spliter1, string spliter2, string dots, object userState) {
            if ((this.DCHotPointQueryOperationCompleted == null)) {
                this.DCHotPointQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCHotPointQueryOperationCompleted);
            }
            this.InvokeAsync("DCHotPointQuery", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2,
                        dots}, this.DCHotPointQueryOperationCompleted, userState);
        }
        
        private void OnDCHotPointQueryOperationCompleted(object arg) {
            if ((this.DCHotPointQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCHotPointQueryCompleted(this, new DCHotPointQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCGetImage", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCGetImage(string layername, string fid) {
            object[] results = this.Invoke("DCGetImage", new object[] {
                        layername,
                        fid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCGetImageAsync(string layername, string fid) {
            this.DCGetImageAsync(layername, fid, null);
        }
        
        /// <remarks/>
        public void DCGetImageAsync(string layername, string fid, object userState) {
            if ((this.DCGetImageOperationCompleted == null)) {
                this.DCGetImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCGetImageOperationCompleted);
            }
            this.InvokeAsync("DCGetImage", new object[] {
                        layername,
                        fid}, this.DCGetImageOperationCompleted, userState);
        }
        
        private void OnDCGetImageOperationCompleted(object arg) {
            if ((this.DCGetImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCGetImageCompleted(this, new DCGetImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCQueryKeyValue", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCQueryKeyValue(string solutionName, string inputAtt, string spliter1, string spliter2, int nPageIndexForShow, int nPageSize, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType, string strAtt) {
            object[] results = this.Invoke("DCQueryKeyValue", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2,
                        nPageIndexForShow,
                        nPageSize,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType,
                        strAtt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCQueryKeyValueAsync(string solutionName, string inputAtt, string spliter1, string spliter2, int nPageIndexForShow, int nPageSize, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType, string strAtt) {
            this.DCQueryKeyValueAsync(solutionName, inputAtt, spliter1, spliter2, nPageIndexForShow, nPageSize, strSelectType, strSpatialType, dots, nRadius, strWhere, bound, pageType, strAtt, null);
        }
        
        /// <remarks/>
        public void DCQueryKeyValueAsync(string solutionName, string inputAtt, string spliter1, string spliter2, int nPageIndexForShow, int nPageSize, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType, string strAtt, object userState) {
            if ((this.DCQueryKeyValueOperationCompleted == null)) {
                this.DCQueryKeyValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCQueryKeyValueOperationCompleted);
            }
            this.InvokeAsync("DCQueryKeyValue", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2,
                        nPageIndexForShow,
                        nPageSize,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType,
                        strAtt}, this.DCQueryKeyValueOperationCompleted, userState);
        }
        
        private void OnDCQueryKeyValueOperationCompleted(object arg) {
            if ((this.DCQueryKeyValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCQueryKeyValueCompleted(this, new DCQueryKeyValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCQueryTF", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCQueryTF(string strTFH, int nPageIndex, int nPageSize) {
            object[] results = this.Invoke("DCQueryTF", new object[] {
                        strTFH,
                        nPageIndex,
                        nPageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCQueryTFAsync(string strTFH, int nPageIndex, int nPageSize) {
            this.DCQueryTFAsync(strTFH, nPageIndex, nPageSize, null);
        }
        
        /// <remarks/>
        public void DCQueryTFAsync(string strTFH, int nPageIndex, int nPageSize, object userState) {
            if ((this.DCQueryTFOperationCompleted == null)) {
                this.DCQueryTFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCQueryTFOperationCompleted);
            }
            this.InvokeAsync("DCQueryTF", new object[] {
                        strTFH,
                        nPageIndex,
                        nPageSize}, this.DCQueryTFOperationCompleted, userState);
        }
        
        private void OnDCQueryTFOperationCompleted(object arg) {
            if ((this.DCQueryTFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCQueryTFCompleted(this, new DCQueryTFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCQuery", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCQuery(string[] solutionNames, string[] inputAtts, string[] spliters1, string[] spliters2, int nPageIndexForShow, int nPageSize, string[] total, string[] cacheRegions, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType) {
            object[] results = this.Invoke("DCQuery", new object[] {
                        solutionNames,
                        inputAtts,
                        spliters1,
                        spliters2,
                        nPageIndexForShow,
                        nPageSize,
                        total,
                        cacheRegions,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCQueryAsync(string[] solutionNames, string[] inputAtts, string[] spliters1, string[] spliters2, int nPageIndexForShow, int nPageSize, string[] total, string[] cacheRegions, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType) {
            this.DCQueryAsync(solutionNames, inputAtts, spliters1, spliters2, nPageIndexForShow, nPageSize, total, cacheRegions, strSelectType, strSpatialType, dots, nRadius, strWhere, bound, pageType, null);
        }
        
        /// <remarks/>
        public void DCQueryAsync(
                    string[] solutionNames, 
                    string[] inputAtts, 
                    string[] spliters1, 
                    string[] spliters2, 
                    int nPageIndexForShow, 
                    int nPageSize, 
                    string[] total, 
                    string[] cacheRegions, 
                    string strSelectType, 
                    string strSpatialType, 
                    string dots, 
                    int nRadius, 
                    string strWhere, 
                    string bound, 
                    string pageType, 
                    object userState) {
            if ((this.DCQueryOperationCompleted == null)) {
                this.DCQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCQueryOperationCompleted);
            }
            this.InvokeAsync("DCQuery", new object[] {
                        solutionNames,
                        inputAtts,
                        spliters1,
                        spliters2,
                        nPageIndexForShow,
                        nPageSize,
                        total,
                        cacheRegions,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType}, this.DCQueryOperationCompleted, userState);
        }
        
        private void OnDCQueryOperationCompleted(object arg) {
            if ((this.DCQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCQueryCompleted(this, new DCQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetQueryResult", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQueryResult(string[] solutionNames, string[] inputAtts, string[] spliters1, string[] spliters2, int nPageIndexForShow, int nPageSize, string[] total, string[] cacheRegions, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType) {
            object[] results = this.Invoke("GetQueryResult", new object[] {
                        solutionNames,
                        inputAtts,
                        spliters1,
                        spliters2,
                        nPageIndexForShow,
                        nPageSize,
                        total,
                        cacheRegions,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryResultAsync(string[] solutionNames, string[] inputAtts, string[] spliters1, string[] spliters2, int nPageIndexForShow, int nPageSize, string[] total, string[] cacheRegions, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType) {
            this.GetQueryResultAsync(solutionNames, inputAtts, spliters1, spliters2, nPageIndexForShow, nPageSize, total, cacheRegions, strSelectType, strSpatialType, dots, nRadius, strWhere, bound, pageType, null);
        }
        
        /// <remarks/>
        public void GetQueryResultAsync(
                    string[] solutionNames, 
                    string[] inputAtts, 
                    string[] spliters1, 
                    string[] spliters2, 
                    int nPageIndexForShow, 
                    int nPageSize, 
                    string[] total, 
                    string[] cacheRegions, 
                    string strSelectType, 
                    string strSpatialType, 
                    string dots, 
                    int nRadius, 
                    string strWhere, 
                    string bound, 
                    string pageType, 
                    object userState) {
            if ((this.GetQueryResultOperationCompleted == null)) {
                this.GetQueryResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryResultOperationCompleted);
            }
            this.InvokeAsync("GetQueryResult", new object[] {
                        solutionNames,
                        inputAtts,
                        spliters1,
                        spliters2,
                        nPageIndexForShow,
                        nPageSize,
                        total,
                        cacheRegions,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType}, this.GetQueryResultOperationCompleted, userState);
        }
        
        private void OnGetQueryResultOperationCompleted(object arg) {
            if ((this.GetQueryResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryResultCompleted(this, new GetQueryResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCQueryAtt", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCQueryAtt(string solutionName, string inputAtt, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound) {
            object[] results = this.Invoke("DCQueryAtt", new object[] {
                        solutionName,
                        inputAtt,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCQueryAttAsync(string solutionName, string inputAtt, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound) {
            this.DCQueryAttAsync(solutionName, inputAtt, strSelectType, strSpatialType, dots, nRadius, strWhere, bound, null);
        }
        
        /// <remarks/>
        public void DCQueryAttAsync(string solutionName, string inputAtt, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, object userState) {
            if ((this.DCQueryAttOperationCompleted == null)) {
                this.DCQueryAttOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCQueryAttOperationCompleted);
            }
            this.InvokeAsync("DCQueryAtt", new object[] {
                        solutionName,
                        inputAtt,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound}, this.DCQueryAttOperationCompleted, userState);
        }
        
        private void OnDCQueryAttOperationCompleted(object arg) {
            if ((this.DCQueryAttCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCQueryAttCompleted(this, new DCQueryAttCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCQueryAttValue", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCQueryAttValue(string solutionName, string inputAtt, int nPageIndexForShow, int nPageSize, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType, string strAtt) {
            object[] results = this.Invoke("DCQueryAttValue", new object[] {
                        solutionName,
                        inputAtt,
                        nPageIndexForShow,
                        nPageSize,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType,
                        strAtt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCQueryAttValueAsync(string solutionName, string inputAtt, int nPageIndexForShow, int nPageSize, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType, string strAtt) {
            this.DCQueryAttValueAsync(solutionName, inputAtt, nPageIndexForShow, nPageSize, strSelectType, strSpatialType, dots, nRadius, strWhere, bound, pageType, strAtt, null);
        }
        
        /// <remarks/>
        public void DCQueryAttValueAsync(string solutionName, string inputAtt, int nPageIndexForShow, int nPageSize, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType, string strAtt, object userState) {
            if ((this.DCQueryAttValueOperationCompleted == null)) {
                this.DCQueryAttValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCQueryAttValueOperationCompleted);
            }
            this.InvokeAsync("DCQueryAttValue", new object[] {
                        solutionName,
                        inputAtt,
                        nPageIndexForShow,
                        nPageSize,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType,
                        strAtt}, this.DCQueryAttValueOperationCompleted, userState);
        }
        
        private void OnDCQueryAttValueOperationCompleted(object arg) {
            if ((this.DCQueryAttValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCQueryAttValueCompleted(this, new DCQueryAttValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCDeleteImage", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DCDeleteImage(string layername, string fid, string filename) {
            object[] results = this.Invoke("DCDeleteImage", new object[] {
                        layername,
                        fid,
                        filename});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DCDeleteImageAsync(string layername, string fid, string filename) {
            this.DCDeleteImageAsync(layername, fid, filename, null);
        }
        
        /// <remarks/>
        public void DCDeleteImageAsync(string layername, string fid, string filename, object userState) {
            if ((this.DCDeleteImageOperationCompleted == null)) {
                this.DCDeleteImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCDeleteImageOperationCompleted);
            }
            this.InvokeAsync("DCDeleteImage", new object[] {
                        layername,
                        fid,
                        filename}, this.DCDeleteImageOperationCompleted, userState);
        }
        
        private void OnDCDeleteImageOperationCompleted(object arg) {
            if ((this.DCDeleteImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCDeleteImageCompleted(this, new DCDeleteImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/SGFullTextSearch", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SGFullTextSearch(string strSearchValue, int nPageIndexForShow, int nPageSize) {
            object[] results = this.Invoke("SGFullTextSearch", new object[] {
                        strSearchValue,
                        nPageIndexForShow,
                        nPageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SGFullTextSearchAsync(string strSearchValue, int nPageIndexForShow, int nPageSize) {
            this.SGFullTextSearchAsync(strSearchValue, nPageIndexForShow, nPageSize, null);
        }
        
        /// <remarks/>
        public void SGFullTextSearchAsync(string strSearchValue, int nPageIndexForShow, int nPageSize, object userState) {
            if ((this.SGFullTextSearchOperationCompleted == null)) {
                this.SGFullTextSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSGFullTextSearchOperationCompleted);
            }
            this.InvokeAsync("SGFullTextSearch", new object[] {
                        strSearchValue,
                        nPageIndexForShow,
                        nPageSize}, this.SGFullTextSearchOperationCompleted, userState);
        }
        
        private void OnSGFullTextSearchOperationCompleted(object arg) {
            if ((this.SGFullTextSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SGFullTextSearchCompleted(this, new SGFullTextSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/SaveQuerySolution", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveQuerySolution(string strUserID, string strQuerySolutionName, string strCmd, string strSubject, string strYear, string strInputAtts, string strLabel, string strSolutionName) {
            object[] results = this.Invoke("SaveQuerySolution", new object[] {
                        strUserID,
                        strQuerySolutionName,
                        strCmd,
                        strSubject,
                        strYear,
                        strInputAtts,
                        strLabel,
                        strSolutionName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveQuerySolutionAsync(string strUserID, string strQuerySolutionName, string strCmd, string strSubject, string strYear, string strInputAtts, string strLabel, string strSolutionName) {
            this.SaveQuerySolutionAsync(strUserID, strQuerySolutionName, strCmd, strSubject, strYear, strInputAtts, strLabel, strSolutionName, null);
        }
        
        /// <remarks/>
        public void SaveQuerySolutionAsync(string strUserID, string strQuerySolutionName, string strCmd, string strSubject, string strYear, string strInputAtts, string strLabel, string strSolutionName, object userState) {
            if ((this.SaveQuerySolutionOperationCompleted == null)) {
                this.SaveQuerySolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveQuerySolutionOperationCompleted);
            }
            this.InvokeAsync("SaveQuerySolution", new object[] {
                        strUserID,
                        strQuerySolutionName,
                        strCmd,
                        strSubject,
                        strYear,
                        strInputAtts,
                        strLabel,
                        strSolutionName}, this.SaveQuerySolutionOperationCompleted, userState);
        }
        
        private void OnSaveQuerySolutionOperationCompleted(object arg) {
            if ((this.SaveQuerySolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveQuerySolutionCompleted(this, new SaveQuerySolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DeleteQuerySolution", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteQuerySolution(string strSolutionName, string strUserID) {
            object[] results = this.Invoke("DeleteQuerySolution", new object[] {
                        strSolutionName,
                        strUserID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteQuerySolutionAsync(string strSolutionName, string strUserID) {
            this.DeleteQuerySolutionAsync(strSolutionName, strUserID, null);
        }
        
        /// <remarks/>
        public void DeleteQuerySolutionAsync(string strSolutionName, string strUserID, object userState) {
            if ((this.DeleteQuerySolutionOperationCompleted == null)) {
                this.DeleteQuerySolutionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteQuerySolutionOperationCompleted);
            }
            this.InvokeAsync("DeleteQuerySolution", new object[] {
                        strSolutionName,
                        strUserID}, this.DeleteQuerySolutionOperationCompleted, userState);
        }
        
        private void OnDeleteQuerySolutionOperationCompleted(object arg) {
            if ((this.DeleteQuerySolutionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteQuerySolutionCompleted(this, new DeleteQuerySolutionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetRuleBySubject", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRuleBySubject(string subjectName) {
            object[] results = this.Invoke("GetRuleBySubject", new object[] {
                        subjectName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRuleBySubjectAsync(string subjectName) {
            this.GetRuleBySubjectAsync(subjectName, null);
        }
        
        /// <remarks/>
        public void GetRuleBySubjectAsync(string subjectName, object userState) {
            if ((this.GetRuleBySubjectOperationCompleted == null)) {
                this.GetRuleBySubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRuleBySubjectOperationCompleted);
            }
            this.InvokeAsync("GetRuleBySubject", new object[] {
                        subjectName}, this.GetRuleBySubjectOperationCompleted, userState);
        }
        
        private void OnGetRuleBySubjectOperationCompleted(object arg) {
            if ((this.GetRuleBySubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRuleBySubjectCompleted(this, new GetRuleBySubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetYearBySubjectAndRegionCode", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetYearBySubjectAndRegionCode(string solutionName, string subjectName, string regionCode) {
            object[] results = this.Invoke("GetYearBySubjectAndRegionCode", new object[] {
                        solutionName,
                        subjectName,
                        regionCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetYearBySubjectAndRegionCodeAsync(string solutionName, string subjectName, string regionCode) {
            this.GetYearBySubjectAndRegionCodeAsync(solutionName, subjectName, regionCode, null);
        }
        
        /// <remarks/>
        public void GetYearBySubjectAndRegionCodeAsync(string solutionName, string subjectName, string regionCode, object userState) {
            if ((this.GetYearBySubjectAndRegionCodeOperationCompleted == null)) {
                this.GetYearBySubjectAndRegionCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetYearBySubjectAndRegionCodeOperationCompleted);
            }
            this.InvokeAsync("GetYearBySubjectAndRegionCode", new object[] {
                        solutionName,
                        subjectName,
                        regionCode}, this.GetYearBySubjectAndRegionCodeOperationCompleted, userState);
        }
        
        private void OnGetYearBySubjectAndRegionCodeOperationCompleted(object arg) {
            if ((this.GetYearBySubjectAndRegionCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetYearBySubjectAndRegionCodeCompleted(this, new GetYearBySubjectAndRegionCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAttByInfo", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAttByInfo(string solutionName, string inputAtt, string spliter1, string spliter2) {
            object[] results = this.Invoke("GetAttByInfo", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAttByInfoAsync(string solutionName, string inputAtt, string spliter1, string spliter2) {
            this.GetAttByInfoAsync(solutionName, inputAtt, spliter1, spliter2, null);
        }
        
        /// <remarks/>
        public void GetAttByInfoAsync(string solutionName, string inputAtt, string spliter1, string spliter2, object userState) {
            if ((this.GetAttByInfoOperationCompleted == null)) {
                this.GetAttByInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttByInfoOperationCompleted);
            }
            this.InvokeAsync("GetAttByInfo", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2}, this.GetAttByInfoOperationCompleted, userState);
        }
        
        private void OnGetAttByInfoOperationCompleted(object arg) {
            if ((this.GetAttByInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttByInfoCompleted(this, new GetAttByInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetFeatureGeometry", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFeatureGeometry(string strSolutionName, string strInputAtt, string strWhere) {
            object[] results = this.Invoke("GetFeatureGeometry", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strWhere});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFeatureGeometryAsync(string strSolutionName, string strInputAtt, string strWhere) {
            this.GetFeatureGeometryAsync(strSolutionName, strInputAtt, strWhere, null);
        }
        
        /// <remarks/>
        public void GetFeatureGeometryAsync(string strSolutionName, string strInputAtt, string strWhere, object userState) {
            if ((this.GetFeatureGeometryOperationCompleted == null)) {
                this.GetFeatureGeometryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFeatureGeometryOperationCompleted);
            }
            this.InvokeAsync("GetFeatureGeometry", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strWhere}, this.GetFeatureGeometryOperationCompleted, userState);
        }
        
        private void OnGetFeatureGeometryOperationCompleted(object arg) {
            if ((this.GetFeatureGeometryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFeatureGeometryCompleted(this, new GetFeatureGeometryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCIndexAtt", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCIndexAtt(string strDataYear, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, bool ifGetParentRegionCode) {
            object[] results = this.Invoke("DCIndexAtt", new object[] {
                        strDataYear,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        ifGetParentRegionCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCIndexAttAsync(string strDataYear, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, bool ifGetParentRegionCode) {
            this.DCIndexAttAsync(strDataYear, strSelectType, strSpatialType, dots, nRadius, strWhere, ifGetParentRegionCode, null);
        }
        
        /// <remarks/>
        public void DCIndexAttAsync(string strDataYear, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, bool ifGetParentRegionCode, object userState) {
            if ((this.DCIndexAttOperationCompleted == null)) {
                this.DCIndexAttOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCIndexAttOperationCompleted);
            }
            this.InvokeAsync("DCIndexAtt", new object[] {
                        strDataYear,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        ifGetParentRegionCode}, this.DCIndexAttOperationCompleted, userState);
        }
        
        private void OnDCIndexAttOperationCompleted(object arg) {
            if ((this.DCIndexAttCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCIndexAttCompleted(this, new DCIndexAttCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetAttValue", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAttValue(string solutionName, string inputAtt, string spliter1, string spliter2, int pageIndex, string attName) {
            object[] results = this.Invoke("GetAttValue", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2,
                        pageIndex,
                        attName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAttValueAsync(string solutionName, string inputAtt, string spliter1, string spliter2, int pageIndex, string attName) {
            this.GetAttValueAsync(solutionName, inputAtt, spliter1, spliter2, pageIndex, attName, null);
        }
        
        /// <remarks/>
        public void GetAttValueAsync(string solutionName, string inputAtt, string spliter1, string spliter2, int pageIndex, string attName, object userState) {
            if ((this.GetAttValueOperationCompleted == null)) {
                this.GetAttValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttValueOperationCompleted);
            }
            this.InvokeAsync("GetAttValue", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2,
                        pageIndex,
                        attName}, this.GetAttValueOperationCompleted, userState);
        }
        
        private void OnGetAttValueOperationCompleted(object arg) {
            if ((this.GetAttValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttValueCompleted(this, new GetAttValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetStatisticsInfo", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStatisticsInfo(string solutionName, string inputAtt, string spliter1, string spliter2, string[] classifyAttNameArr, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")] [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)] string[][] classifyAttValueArr, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")] [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)] string[][] classifyWhereArr, string[] classifyModeArr, string[] statisticsAttNameArr, string[] statisticsAliasAttNameArr, string[] statisticsModeArr) {
            object[] results = this.Invoke("GetStatisticsInfo", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2,
                        classifyAttNameArr,
                        classifyAttValueArr,
                        classifyWhereArr,
                        classifyModeArr,
                        statisticsAttNameArr,
                        statisticsAliasAttNameArr,
                        statisticsModeArr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatisticsInfoAsync(string solutionName, string inputAtt, string spliter1, string spliter2, string[] classifyAttNameArr, string[][] classifyAttValueArr, string[][] classifyWhereArr, string[] classifyModeArr, string[] statisticsAttNameArr, string[] statisticsAliasAttNameArr, string[] statisticsModeArr) {
            this.GetStatisticsInfoAsync(solutionName, inputAtt, spliter1, spliter2, classifyAttNameArr, classifyAttValueArr, classifyWhereArr, classifyModeArr, statisticsAttNameArr, statisticsAliasAttNameArr, statisticsModeArr, null);
        }
        
        /// <remarks/>
        public void GetStatisticsInfoAsync(string solutionName, string inputAtt, string spliter1, string spliter2, string[] classifyAttNameArr, string[][] classifyAttValueArr, string[][] classifyWhereArr, string[] classifyModeArr, string[] statisticsAttNameArr, string[] statisticsAliasAttNameArr, string[] statisticsModeArr, object userState) {
            if ((this.GetStatisticsInfoOperationCompleted == null)) {
                this.GetStatisticsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatisticsInfoOperationCompleted);
            }
            this.InvokeAsync("GetStatisticsInfo", new object[] {
                        solutionName,
                        inputAtt,
                        spliter1,
                        spliter2,
                        classifyAttNameArr,
                        classifyAttValueArr,
                        classifyWhereArr,
                        classifyModeArr,
                        statisticsAttNameArr,
                        statisticsAliasAttNameArr,
                        statisticsModeArr}, this.GetStatisticsInfoOperationCompleted, userState);
        }
        
        private void OnGetStatisticsInfoOperationCompleted(object arg) {
            if ((this.GetStatisticsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatisticsInfoCompleted(this, new GetStatisticsInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetSubjcectFromDataDicTable", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubjcectFromDataDicTable() {
            object[] results = this.Invoke("GetSubjcectFromDataDicTable", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubjcectFromDataDicTableAsync() {
            this.GetSubjcectFromDataDicTableAsync(null);
        }
        
        /// <remarks/>
        public void GetSubjcectFromDataDicTableAsync(object userState) {
            if ((this.GetSubjcectFromDataDicTableOperationCompleted == null)) {
                this.GetSubjcectFromDataDicTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubjcectFromDataDicTableOperationCompleted);
            }
            this.InvokeAsync("GetSubjcectFromDataDicTable", new object[0], this.GetSubjcectFromDataDicTableOperationCompleted, userState);
        }
        
        private void OnGetSubjcectFromDataDicTableOperationCompleted(object arg) {
            if ((this.GetSubjcectFromDataDicTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubjcectFromDataDicTableCompleted(this, new GetSubjcectFromDataDicTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/GetDataConnecBySubject", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataConnecBySubject(string strSubjectName) {
            object[] results = this.Invoke("GetDataConnecBySubject", new object[] {
                        strSubjectName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataConnecBySubjectAsync(string strSubjectName) {
            this.GetDataConnecBySubjectAsync(strSubjectName, null);
        }
        
        /// <remarks/>
        public void GetDataConnecBySubjectAsync(string strSubjectName, object userState) {
            if ((this.GetDataConnecBySubjectOperationCompleted == null)) {
                this.GetDataConnecBySubjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataConnecBySubjectOperationCompleted);
            }
            this.InvokeAsync("GetDataConnecBySubject", new object[] {
                        strSubjectName}, this.GetDataConnecBySubjectOperationCompleted, userState);
        }
        
        private void OnGetDataConnecBySubjectOperationCompleted(object arg) {
            if ((this.GetDataConnecBySubjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataConnecBySubjectCompleted(this, new GetDataConnecBySubjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/SetBufferQueryParam", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetBufferQueryParam(string strSolutionName, string strInputAtt, string strDots, string strBufferDis, string strBufferMode, string strBufferType) {
            object[] results = this.Invoke("SetBufferQueryParam", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strDots,
                        strBufferDis,
                        strBufferMode,
                        strBufferType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetBufferQueryParamAsync(string strSolutionName, string strInputAtt, string strDots, string strBufferDis, string strBufferMode, string strBufferType) {
            this.SetBufferQueryParamAsync(strSolutionName, strInputAtt, strDots, strBufferDis, strBufferMode, strBufferType, null);
        }
        
        /// <remarks/>
        public void SetBufferQueryParamAsync(string strSolutionName, string strInputAtt, string strDots, string strBufferDis, string strBufferMode, string strBufferType, object userState) {
            if ((this.SetBufferQueryParamOperationCompleted == null)) {
                this.SetBufferQueryParamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBufferQueryParamOperationCompleted);
            }
            this.InvokeAsync("SetBufferQueryParam", new object[] {
                        strSolutionName,
                        strInputAtt,
                        strDots,
                        strBufferDis,
                        strBufferMode,
                        strBufferType}, this.SetBufferQueryParamOperationCompleted, userState);
        }
        
        private void OnSetBufferQueryParamOperationCompleted(object arg) {
            if ((this.SetBufferQueryParamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBufferQueryParamCompleted(this, new SetBufferQueryParamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/QueryCadaApprove4YZ", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryCadaApprove4YZ(string strDJNOs) {
            object[] results = this.Invoke("QueryCadaApprove4YZ", new object[] {
                        strDJNOs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryCadaApprove4YZAsync(string strDJNOs) {
            this.QueryCadaApprove4YZAsync(strDJNOs, null);
        }
        
        /// <remarks/>
        public void QueryCadaApprove4YZAsync(string strDJNOs, object userState) {
            if ((this.QueryCadaApprove4YZOperationCompleted == null)) {
                this.QueryCadaApprove4YZOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryCadaApprove4YZOperationCompleted);
            }
            this.InvokeAsync("QueryCadaApprove4YZ", new object[] {
                        strDJNOs}, this.QueryCadaApprove4YZOperationCompleted, userState);
        }
        
        private void OnQueryCadaApprove4YZOperationCompleted(object arg) {
            if ((this.QueryCadaApprove4YZCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCadaApprove4YZCompleted(this, new QueryCadaApprove4YZCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCQueryAttValueAndBound", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCQueryAttValueAndBound(string solutionName, string inputAtt, int nPageIndexForShow, int nPageSize, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType, string strAtt) {
            object[] results = this.Invoke("DCQueryAttValueAndBound", new object[] {
                        solutionName,
                        inputAtt,
                        nPageIndexForShow,
                        nPageSize,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType,
                        strAtt});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCQueryAttValueAndBoundAsync(string solutionName, string inputAtt, int nPageIndexForShow, int nPageSize, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType, string strAtt) {
            this.DCQueryAttValueAndBoundAsync(solutionName, inputAtt, nPageIndexForShow, nPageSize, strSelectType, strSpatialType, dots, nRadius, strWhere, bound, pageType, strAtt, null);
        }
        
        /// <remarks/>
        public void DCQueryAttValueAndBoundAsync(string solutionName, string inputAtt, int nPageIndexForShow, int nPageSize, string strSelectType, string strSpatialType, string dots, int nRadius, string strWhere, string bound, string pageType, string strAtt, object userState) {
            if ((this.DCQueryAttValueAndBoundOperationCompleted == null)) {
                this.DCQueryAttValueAndBoundOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCQueryAttValueAndBoundOperationCompleted);
            }
            this.InvokeAsync("DCQueryAttValueAndBound", new object[] {
                        solutionName,
                        inputAtt,
                        nPageIndexForShow,
                        nPageSize,
                        strSelectType,
                        strSpatialType,
                        dots,
                        nRadius,
                        strWhere,
                        bound,
                        pageType,
                        strAtt}, this.DCQueryAttValueAndBoundOperationCompleted, userState);
        }
        
        private void OnDCQueryAttValueAndBoundOperationCompleted(object arg) {
            if ((this.DCQueryAttValueAndBoundCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCQueryAttValueAndBoundCompleted(this, new DCQueryAttValueAndBoundCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCTestQuery", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCTestQuery() {
            object[] results = this.Invoke("DCTestQuery", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCTestQueryAsync() {
            this.DCTestQueryAsync(null);
        }
        
        /// <remarks/>
        public void DCTestQueryAsync(object userState) {
            if ((this.DCTestQueryOperationCompleted == null)) {
                this.DCTestQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCTestQueryOperationCompleted);
            }
            this.InvokeAsync("DCTestQuery", new object[0], this.DCTestQueryOperationCompleted, userState);
        }
        
        private void OnDCTestQueryOperationCompleted(object arg) {
            if ((this.DCTestQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCTestQueryCompleted(this, new DCTestQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.mapgis.com.cn/DCQueryAlias", RequestNamespace="http://www.mapgis.com.cn/", ResponseNamespace="http://www.mapgis.com.cn/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DCQueryAlias(string[] strLayerShortNames) {
            object[] results = this.Invoke("DCQueryAlias", new object[] {
                        strLayerShortNames});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DCQueryAliasAsync(string[] strLayerShortNames) {
            this.DCQueryAliasAsync(strLayerShortNames, null);
        }
        
        /// <remarks/>
        public void DCQueryAliasAsync(string[] strLayerShortNames, object userState) {
            if ((this.DCQueryAliasOperationCompleted == null)) {
                this.DCQueryAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDCQueryAliasOperationCompleted);
            }
            this.InvokeAsync("DCQueryAlias", new object[] {
                        strLayerShortNames}, this.DCQueryAliasOperationCompleted, userState);
        }
        
        private void OnDCQueryAliasOperationCompleted(object arg) {
            if ((this.DCQueryAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DCQueryAliasCompleted(this, new DCQueryAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCLocaltionQueryCompletedEventHandler(object sender, DCLocaltionQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCLocaltionQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCLocaltionQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCRedLineQueryCompletedEventHandler(object sender, DCRedLineQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCRedLineQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCRedLineQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCHotPointQueryCompletedEventHandler(object sender, DCHotPointQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCHotPointQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCHotPointQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCGetImageCompletedEventHandler(object sender, DCGetImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCGetImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCGetImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCQueryKeyValueCompletedEventHandler(object sender, DCQueryKeyValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCQueryKeyValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCQueryKeyValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCQueryTFCompletedEventHandler(object sender, DCQueryTFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCQueryTFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCQueryTFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCQueryCompletedEventHandler(object sender, DCQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetQueryResultCompletedEventHandler(object sender, GetQueryResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCQueryAttCompletedEventHandler(object sender, DCQueryAttCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCQueryAttCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCQueryAttCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCQueryAttValueCompletedEventHandler(object sender, DCQueryAttValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCQueryAttValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCQueryAttValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCDeleteImageCompletedEventHandler(object sender, DCDeleteImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCDeleteImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCDeleteImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SGFullTextSearchCompletedEventHandler(object sender, SGFullTextSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SGFullTextSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SGFullTextSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SaveQuerySolutionCompletedEventHandler(object sender, SaveQuerySolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveQuerySolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveQuerySolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteQuerySolutionCompletedEventHandler(object sender, DeleteQuerySolutionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteQuerySolutionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteQuerySolutionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetRuleBySubjectCompletedEventHandler(object sender, GetRuleBySubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRuleBySubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRuleBySubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetYearBySubjectAndRegionCodeCompletedEventHandler(object sender, GetYearBySubjectAndRegionCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetYearBySubjectAndRegionCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetYearBySubjectAndRegionCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAttByInfoCompletedEventHandler(object sender, GetAttByInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttByInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttByInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetFeatureGeometryCompletedEventHandler(object sender, GetFeatureGeometryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFeatureGeometryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFeatureGeometryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCIndexAttCompletedEventHandler(object sender, DCIndexAttCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCIndexAttCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCIndexAttCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAttValueCompletedEventHandler(object sender, GetAttValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetStatisticsInfoCompletedEventHandler(object sender, GetStatisticsInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatisticsInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatisticsInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSubjcectFromDataDicTableCompletedEventHandler(object sender, GetSubjcectFromDataDicTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubjcectFromDataDicTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubjcectFromDataDicTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDataConnecBySubjectCompletedEventHandler(object sender, GetDataConnecBySubjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataConnecBySubjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataConnecBySubjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetBufferQueryParamCompletedEventHandler(object sender, SetBufferQueryParamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBufferQueryParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBufferQueryParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void QueryCadaApprove4YZCompletedEventHandler(object sender, QueryCadaApprove4YZCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryCadaApprove4YZCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCadaApprove4YZCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCQueryAttValueAndBoundCompletedEventHandler(object sender, DCQueryAttValueAndBoundCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCQueryAttValueAndBoundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCQueryAttValueAndBoundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCTestQueryCompletedEventHandler(object sender, DCTestQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCTestQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCTestQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DCQueryAliasCompletedEventHandler(object sender, DCQueryAliasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DCQueryAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DCQueryAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591